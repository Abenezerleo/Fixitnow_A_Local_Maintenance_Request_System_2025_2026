import { Repository } from 'typeorm';
import { User } from './entities/user.entity';
import { Request } from '../requests/entities/request.entity';
import { Service } from '../services/entities/service.entity';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { CreateRequestDto } from '../requests/dto/create-request.dto';
export declare class UsersService {
    private userRepository;
    private requestRepository;
    private serviceRepository;
    constructor(userRepository: Repository<User>, requestRepository: Repository<Request>, serviceRepository: Repository<Service>);
    create(createUserDto: CreateUserDto): Promise<User>;
    findAll(): Promise<User[]>;
    findOne(id: number): Promise<User>;
    findByEmail(email: string): Promise<User | null>;
    update(id: number, updateUserDto: UpdateUserDto, currentUser: User): Promise<User>;
    remove(id: number, currentUser: User): Promise<void>;
    getRequesters(): Promise<User[]>;
    getProviders(): Promise<User[]>;
    getTotalRequesters(): Promise<number>;
    getTotalProviders(): Promise<number>;
    findRequesterByName(name: string): Promise<User[]>;
    findProviderByName(name: string): Promise<User[]>;
    getRequestStatistics(): Promise<{
        totalCompleted: number;
        totalRejected: number;
        totalPending: number;
    }>;
    getTotalCompleted(): Promise<number>;
    getTotalRejected(): Promise<number>;
    getTotalPending(): Promise<number>;
    getCompletedRequests(): Promise<Request[]>;
    getRejectedRequests(): Promise<Request[]>;
    getTopRatedProviders(): Promise<User[]>;
    getProviderServices(providerId: number): Promise<Service[]>;
    getProviderRequests(providerId: number): Promise<Request[]>;
    createRequest(requesterId: number, createRequestDto: CreateRequestDto): Promise<Request>;
    getRequesterRequests(requesterId: number): Promise<Request[]>;
    getProfile(userId: number): Promise<User>;
    getProviderPerformance(providerId: number): Promise<any>;
    getPaymentAccounts(userId: number): Promise<Partial<User>>;
}
